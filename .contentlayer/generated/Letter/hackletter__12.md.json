{
  "title": "Behind the scenes of my digital bookshelf 📚",
  "date": "2021-06-08T00:00:00.000Z",
  "body": {
    "raw": "\n_Hi, I’m Aravind Balla and you are reading letter 12 from the Hackletter where I talk about my learnings and give you behind the scenes of things I keep doing for fun._\n\nI recently built a corner on my website with the details of the books I read on Kindle and the highlights I take while reading them. I call it – [Bookshelf](https://aravindballa.com/bookshelf/). _What else would I?_. Thanks to modern technology, the website updated automatically while I keep reading and I don't have to push a button.\n\nI want to talk about how I did that in this letter.\n\n## Secret sauce 🍅\n\nReadwise plays a huge role here. Readwise is a service that syncs your highlights and notes from a lot of sources. Kindle happens to be a popular and the most used source (for me). In this case, Readwise is responsible for getting all the highlights and the book details into my digital bookshelf.\n\nI make API calls to Readwise with my API token and fetch all the details I need to show on my bookshelf.\n\nReadwise referral if you'd like to try it - [https://readwise.io/i/aravind1](https://readwise.io/i/aravind1)\n\n## How does it automatically update, though?\n\nMy website is basically a bunch of static pages. And I use NextJS, a framework based on ReactJS to generate those static pages. It's powerful. Let me tell you how.\n\nIt has a cool feature called Incremental Static Regeneration (ISR), which allows a particular page on the website to **rebuilt on the fly** to be always upto-date. When someone visits the page, it tries to rebuild the page on its servers to check for new content.\n\nThe interesting advantage I get here is – if this new build fails for some reason, like API spec changes or API doesn't work anymore, I still have the old page live. Nothing is lost and there is no downtime.\n\nAll the pages in the bookshelf are ISR enabled, so they stay updated, always.\n\n## Hiccups ⏹\n\nIt wasn't a complete cake walk, at least while deploying. Readwise's API has a rate limit. We can only fetch the data, highlights or the book details, certain times in a minute. As my website was statically generated, it tried to fetch highlights for all the books while building the site and deploying. It would always fail.\n\nHow did I solve it? _By not building the book pages (the one's with highlights)._\n\nThis is another area where NextJS shines. I can ask it to build the pages when the user visits and not build it at the time of deployment. If the page is not yet built, it builds it. If it is already built, it serves it from the cache. As it is deployed on an [Edge network](https://vercel.com/docs/edge-network/caching), there are copies of the cache across the world and pages are served very fast to the users. This is some sort of delayed static site generation.\n\nThe code is completely **opensource** - [https://github.com/aravindballa/website/tree/master/pages/bookshelf](https://github.com/aravindballa/website/tree/master/pages/bookshelf)\n\n## What's in for the future\n\nI would like to add my takes on the highlights and write full length summaries from the notes I take while reading the books.\n\n_And what about physical books?_ I don't know yet. I'm sure I can add the books manually to\n\nReadwise and add highlights using the OCR feature of their mobile app. I will have opinions when I try this.\n\nAudio books? No idea, as well.\n\n---\n\nThanks reading and I’d appreciate if you reply and let me know what you think about this. I'd love some feedback and suggestions. Share this with your friends if you think they’ll enjoy too. If you are planning to build one, or already have a bookshelf, send me your links and thoughts by replying here or [DM on twitter](https://twitter.com/aravindballa).\n\nI'm enjoying hand lettering these day. A recent one - Fail Upwards 🔺\n\n![art](https://res.cloudinary.com/djeivq7td/image/upload/v1623125276/HL/fail-updward-artwork.jpg)\n\nSee you next Tuesday 👋\n",
    "code": "var Component=(()=>{var c=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),f=(a,e)=>{for(var i in e)o(a,i,{get:e[i],enumerable:!0})},h=(a,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of g(e))!m.call(a,n)&&n!==i&&o(a,n,{get:()=>e[n],enumerable:!(s=p(e,n))||s.enumerable});return a};var y=(a,e,i)=>(i=a!=null?c(u(a)):{},h(e||!a||!a.__esModule?o(i,\"default\",{value:a,enumerable:!0}):i,a)),b=a=>h(o({},\"__esModule\",{value:!0}),a);var r=w((R,l)=>{l.exports=_jsx_runtime});var A={};f(A,{default:()=>v,frontmatter:()=>k});var t=y(r()),k={title:\"Behind the scenes of my digital bookshelf \\u{1F4DA}\",date:\"2021-06-08\",type:\"Letter\"};function d(a){let e=Object.assign({p:\"p\",em:\"em\",a:\"a\",h2:\"h2\",strong:\"strong\",hr:\"hr\",img:\"img\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Hi, I\\u2019m Aravind Balla and you are reading letter 12 from the Hackletter where I talk about my learnings and give you behind the scenes of things I keep doing for fun.\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"I recently built a corner on my website with the details of the books I read on Kindle and the highlights I take while reading them. I call it \\u2013 \",(0,t.jsx)(e.a,{href:\"https://aravindballa.com/bookshelf/\",children:\"Bookshelf\"}),\". \",(0,t.jsx)(e.em,{children:\"What else would I?\"}),\". Thanks to modern technology, the website updated automatically while I keep reading and I don't have to push a button.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"I want to talk about how I did that in this letter.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Secret sauce \\u{1F345}\"}),`\n`,(0,t.jsx)(e.p,{children:\"Readwise plays a huge role here. Readwise is a service that syncs your highlights and notes from a lot of sources. Kindle happens to be a popular and the most used source (for me). In this case, Readwise is responsible for getting all the highlights and the book details into my digital bookshelf.\"}),`\n`,(0,t.jsx)(e.p,{children:\"I make API calls to Readwise with my API token and fetch all the details I need to show on my bookshelf.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Readwise referral if you'd like to try it - \",(0,t.jsx)(e.a,{href:\"https://readwise.io/i/aravind1\",children:\"https://readwise.io/i/aravind1\"})]}),`\n`,(0,t.jsx)(e.h2,{children:\"How does it automatically update, though?\"}),`\n`,(0,t.jsx)(e.p,{children:\"My website is basically a bunch of static pages. And I use NextJS, a framework based on ReactJS to generate those static pages. It's powerful. Let me tell you how.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"It has a cool feature called Incremental Static Regeneration (ISR), which allows a particular page on the website to \",(0,t.jsx)(e.strong,{children:\"rebuilt on the fly\"}),\" to be always upto-date. When someone visits the page, it tries to rebuild the page on its servers to check for new content.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The interesting advantage I get here is \\u2013 if this new build fails for some reason, like API spec changes or API doesn't work anymore, I still have the old page live. Nothing is lost and there is no downtime.\"}),`\n`,(0,t.jsx)(e.p,{children:\"All the pages in the bookshelf are ISR enabled, so they stay updated, always.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Hiccups \\u23F9\"}),`\n`,(0,t.jsx)(e.p,{children:\"It wasn't a complete cake walk, at least while deploying. Readwise's API has a rate limit. We can only fetch the data, highlights or the book details, certain times in a minute. As my website was statically generated, it tried to fetch highlights for all the books while building the site and deploying. It would always fail.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"How did I solve it? \",(0,t.jsx)(e.em,{children:\"By not building the book pages (the one's with highlights).\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is another area where NextJS shines. I can ask it to build the pages when the user visits and not build it at the time of deployment. If the page is not yet built, it builds it. If it is already built, it serves it from the cache. As it is deployed on an \",(0,t.jsx)(e.a,{href:\"https://vercel.com/docs/edge-network/caching\",children:\"Edge network\"}),\", there are copies of the cache across the world and pages are served very fast to the users. This is some sort of delayed static site generation.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The code is completely \",(0,t.jsx)(e.strong,{children:\"opensource\"}),\" - \",(0,t.jsx)(e.a,{href:\"https://github.com/aravindballa/website/tree/master/pages/bookshelf\",children:\"https://github.com/aravindballa/website/tree/master/pages/bookshelf\"})]}),`\n`,(0,t.jsx)(e.h2,{children:\"What's in for the future\"}),`\n`,(0,t.jsx)(e.p,{children:\"I would like to add my takes on the highlights and write full length summaries from the notes I take while reading the books.\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.em,{children:\"And what about physical books?\"}),\" I don't know yet. I'm sure I can add the books manually to\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Readwise and add highlights using the OCR feature of their mobile app. I will have opinions when I try this.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Audio books? No idea, as well.\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsxs)(e.p,{children:[\"Thanks reading and I\\u2019d appreciate if you reply and let me know what you think about this. I'd love some feedback and suggestions. Share this with your friends if you think they\\u2019ll enjoy too. If you are planning to build one, or already have a bookshelf, send me your links and thoughts by replying here or \",(0,t.jsx)(e.a,{href:\"https://twitter.com/aravindballa\",children:\"DM on twitter\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"I'm enjoying hand lettering these day. A recent one - Fail Upwards \\u{1F53A}\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://res.cloudinary.com/djeivq7td/image/upload/v1623125276/HL/fail-updward-artwork.jpg\",alt:\"art\"})}),`\n`,(0,t.jsx)(e.p,{children:\"See you next Tuesday \\u{1F44B}\"})]})}function I(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(d,a)})):d(a)}var v=I;return b(A);})();\n;return Component;"
  },
  "_id": "hackletter/12.md",
  "_raw": {
    "sourceFilePath": "hackletter/12.md",
    "sourceFileName": "12.md",
    "sourceFileDir": "hackletter",
    "contentType": "markdown",
    "flattenedPath": "hackletter/12"
  },
  "type": "Letter",
  "slug": "/hackletter/12"
}