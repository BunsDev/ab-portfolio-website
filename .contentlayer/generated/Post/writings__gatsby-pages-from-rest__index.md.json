{
  "title": "Build pages in Gatsby from Rest API",
  "date": "2021-02-25T00:00:00.000Z",
  "published": true,
  "description": "Its not that hard. We just have to hook into gatsby-node.",
  "tags": "gatsby, gatsbyjs, advanced gatsby, rest api, graphql, gatsby-source-api",
  "banner": "banner.jpg",
  "bannercaption": "Photo by Tamara Bitter on Unsplash",
  "bannerFullWidth": true,
  "body": {
    "raw": "\nCreating pages in Gatsby is easy. But when we want the pages to be also part of the GraphQL layer so that we can query them in index pages, we need to hook into `sourceNode()` in the `gatsby-node.js`.\n\n```js\n// gatsby-node.js\n\nconst fetch = require(‘node-fetch’;)\n\n// part one\nconst createPages = async ({ actions }) => {\n  const { createPage } = actions;\n\n  const allPosts = await (await fetch(‘http://some-api.com/all’)).json();\n  for (const post of allPosts) {\n    const blocks = await (await fetch(‘http://some-api.com/post/’ + post.id)).json();\n    createPage({\n      path: `writings/${post.Slug}`,\n      component: path.resolve(`./src/templates/post.js`),\n      context: {\n        slug: `writings/${post.Slug}`,\n        blocks,\n      },\n    });\n  }\n};\n\n// part two\nconst sourceNodes = async ({ actions }) => {\n  const { createNode } = actions;\n\n  const allPosts = await (await fetch(‘http://some-api.com/all’)).json();\n  for (const post of allPosts) {\n    // create node for graphql\n    const node = {\n      id: `${post.Slug}`,\n      parent: `__SOURCE__`,\n      internal: {\n        // lets you query nodes using allAPIPost and APIPost\n        type: `APIPost`,\n      },\n      children: [],\n\n      // Other fields that you want to query with graphQl\n      slug: post.Slug,\n      title: post.Name,\n      date: post.Date,\n      draft: post.Draft,\n    };\n    const contentDigest = crypto.createHash(`md5`).update(JSON.stringify(node)).digest(`hex`);\n    node.internal.contentDigest = contentDigest;\n    createNode(node);\n  }\n};\n\n// module.exports = { createPages, sourceNodes };\n```\n\nLet me explain this. There are 2 parts to it.\n\n- One - creating the pages after fetching from the rest API using `createPage()`\n- Two - creating the node in the GraphQL layer to be able to query in other pages (for example in `index.js` where you list all the pages)\n\nAfter adding that piece of code to `gatsby-node.js` and running `gatsby develop` you will have pages created at the `path` you’ve given to `createPage()`.\n\nTo list them in any other page, we can use a query that looks like this\n\n```graphql\nquery {\n  allPost(sort: { order: DESC, fields: date }) {\n    nodes {\n      slug\n      title\n      date\n    }\n  }\n}\n```\n\nYou can experiment with the query in GraphiQL dashboard that runs when you `gatsby develop`.\n\nHope this helps.\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!y.call(t,a)&&a!==o&&s(t,a,{get:()=>e[a],enumerable:!(r=p(e,a))||r.enumerable});return t};var b=(t,e,o)=>(o=t!=null?h(u(t)):{},i(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>i(s({},\"__esModule\",{value:!0}),t);var l=m((N,c)=>{c.exports=_jsx_runtime});var q={};f(q,{default:()=>x,frontmatter:()=>P});var n=b(l()),P={title:\"Build pages in Gatsby from Rest API\",date:\"2021-02-25\",type:\"Post\",published:!0,description:\"Its not that hard. We just have to hook into gatsby-node.\",tags:\"gatsby, gatsbyjs, advanced gatsby, rest api, graphql, gatsby-source-api\",banner:\"banner.jpg\",bannercaption:\"Photo by Tamara Bitter on Unsplash\",bannerFullWidth:!0};function d(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Creating pages in Gatsby is easy. But when we want the pages to be also part of the GraphQL layer so that we can query them in index pages, we need to hook into \",(0,n.jsx)(e.code,{children:\"sourceNode()\"}),\" in the \",(0,n.jsx)(e.code,{children:\"gatsby-node.js\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// gatsby-node.js\n\nconst fetch = require(\\u2018node-fetch\\u2019;)\n\n// part one\nconst createPages = async ({ actions }) => {\n  const { createPage } = actions;\n\n  const allPosts = await (await fetch(\\u2018http://some-api.com/all\\u2019)).json();\n  for (const post of allPosts) {\n    const blocks = await (await fetch(\\u2018http://some-api.com/post/\\u2019 + post.id)).json();\n    createPage({\n      path: \\`writings/\\${post.Slug}\\`,\n      component: path.resolve(\\`./src/templates/post.js\\`),\n      context: {\n        slug: \\`writings/\\${post.Slug}\\`,\n        blocks,\n      },\n    });\n  }\n};\n\n// part two\nconst sourceNodes = async ({ actions }) => {\n  const { createNode } = actions;\n\n  const allPosts = await (await fetch(\\u2018http://some-api.com/all\\u2019)).json();\n  for (const post of allPosts) {\n    // create node for graphql\n    const node = {\n      id: \\`\\${post.Slug}\\`,\n      parent: \\`__SOURCE__\\`,\n      internal: {\n        // lets you query nodes using allAPIPost and APIPost\n        type: \\`APIPost\\`,\n      },\n      children: [],\n\n      // Other fields that you want to query with graphQl\n      slug: post.Slug,\n      title: post.Name,\n      date: post.Date,\n      draft: post.Draft,\n    };\n    const contentDigest = crypto.createHash(\\`md5\\`).update(JSON.stringify(node)).digest(\\`hex\\`);\n    node.internal.contentDigest = contentDigest;\n    createNode(node);\n  }\n};\n\n// module.exports = { createPages, sourceNodes };\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Let me explain this. There are 2 parts to it.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"One - creating the pages after fetching from the rest API using \",(0,n.jsx)(e.code,{children:\"createPage()\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Two - creating the node in the GraphQL layer to be able to query in other pages (for example in \",(0,n.jsx)(e.code,{children:\"index.js\"}),\" where you list all the pages)\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"After adding that piece of code to \",(0,n.jsx)(e.code,{children:\"gatsby-node.js\"}),\" and running \",(0,n.jsx)(e.code,{children:\"gatsby develop\"}),\" you will have pages created at the \",(0,n.jsx)(e.code,{children:\"path\"}),\" you\\u2019ve given to \",(0,n.jsx)(e.code,{children:\"createPage()\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To list them in any other page, we can use a query that looks like this\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-graphql\",children:`query {\n  allPost(sort: { order: DESC, fields: date }) {\n    nodes {\n      slug\n      title\n      date\n    }\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can experiment with the query in GraphiQL dashboard that runs when you \",(0,n.jsx)(e.code,{children:\"gatsby develop\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Hope this helps.\"})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var x=j;return w(q);})();\n;return Component;"
  },
  "_id": "writings/gatsby-pages-from-rest/index.md",
  "_raw": {
    "sourceFilePath": "writings/gatsby-pages-from-rest/index.md",
    "sourceFileName": "index.md",
    "sourceFileDir": "writings/gatsby-pages-from-rest",
    "contentType": "markdown",
    "flattenedPath": "writings/gatsby-pages-from-rest"
  },
  "type": "Post",
  "slug": "/writings/gatsby-pages-from-rest"
}