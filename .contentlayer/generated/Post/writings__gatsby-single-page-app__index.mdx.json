{
  "title": "Single Page Apps with Gatsby",
  "date": "2019-11-04T00:00:00.000Z",
  "description": "Can we build a single page application using a static site generator, Gatsby? Ofcourse yes!",
  "banner": "cover.jpg",
  "bannercaption": "Photo by Tim Trad on Unsplash",
  "body": {
    "raw": "\nGatsby, which is a static site generator, is famous for blogs and documentation websites. But there is no wrong in build full blown React apps with it.\n\nIn the case of a blog, Gatsby builds a page for every article at the build time and generates a directory which can be hosted directly. But when it comes to Single Page App (SPA), we have only one `index.html` at the root, and the components are loaded depending on the route that the user is in.\n\nWe can get the benefits of code spitting with some React lazy suspense features with some minimal extra work too.\n\n```jsx\nconst Contact = React.lazy(() => import('../components/Contact'));\nconst LazyContact = (props) => (\n  <React.Suspense fallback={'<p>Loading...</p>'}>\n    <Contact {...props} />\n  </React.Suspense>\n);\n```\n\nThe `Contact` component is loaded only when it will be rendered, which is when we hit a particular route. We will have a look at the routes in a moment.\n\n## But wait\n\nBefore that, we need a `gatsby-node.js` file to let Gatsby know that we want all the route to end up in `index.html`\n\nAfter cloning Gatsby's Default starter, let's add this file.\n\n```js\n// gatsby-node.js\n\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage } = actions;\n  if (page.path === `/`) {\n    page.matchPath = `/*`;\n    createPage(page);\n  }\n};\n```\n\nNow we are ready.\n\n## Components for each Routes\n\nLet's plan to have two routes, `/contact` and `/about` . In `src/components` we will create basic components like this.\n\n```jsx\n// src/components/Contact.js\nimport React from 'react';\n\nconsole.log('contact component');\n\nexport default function () {\n  return <div>Contact Us as you like.</div>;\n}\n\n// src/components/About.js\nimport React from 'react';\n\nconsole.log('about component');\n\nexport default function () {\n  return <div>We are a great bunch of people</div>;\n}\n```\n\nI've added the console logs to check when this file is loaded. We don't want it to load at the homepage. Rather only when the route is visited.\n\n## Main App\n\nIn the main page, which is `src/pages/index.js` we make use for `@reach/router` which Gatsby itself, uses for routing.\n\n```jsx\n// src/pages/index.js\n\nimport React from 'react';\nimport { Router, Link } from '@reach/router';\n\nconst Contact = React.lazy(() => import('../components/Contact'));\nconst About = React.lazy(() => import('../components/About'));\n\nconst LazyComponent = ({ Component, ...props }) => (\n  <React.Suspense fallback={'<p>Loading...</p>'}>\n    <Component {...props} />\n  </React.Suspense>\n);\n\nconst Home = () => <h2>Hello and Welcome</h2>;\n\nconst IndexPage = () => (\n  <div>\n    <h1>Hi people</h1>\n    <Link to=\"/\">Home</Link>\n    <br />\n    <Link to=\"/contact/\">Contact</Link>\n    <br />\n    <Link to=\"/about-us\">About Us</Link>\n    <br />\n\n    <input />\n\n    <Router>\n      <Home path=\"/\" />\n      <LazyComponent Component={Contact} path=\"contact\" />\n      <LazyComponent Component={About} path=\"about-us\" />\n    </Router>\n  </div>\n);\n```\n\n`LazyComponent` renders the `Component` we pass to it as a prop under `React.Suspense` with a fallback.\n\nIf you build this project and serve, you can open the Networks tab in the browser console and see that a new JS file is loaded when you hit the `/contact` route for the first time.\n\nThat's it, this is all we need to make an SPA using Gatsby.\n\nHere is a working codesandbox link - [https://codesandbox.io/s/gatsby-starter-default-yf72w](https://codesandbox.io/s/gatsby-starter-default-yf72w)\n",
    "code": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!g.call(t,a)&&a!==o&&c(t,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return t};var w=(t,e,o)=>(o=t!=null?h(m(t)):{},i(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>i(c({},\"__esModule\",{value:!0}),t);var d=b((L,r)=>{r.exports=_jsx_runtime});var j={};f(j,{default:()=>k,frontmatter:()=>C});var n=w(d()),C={title:\"Single Page Apps with Gatsby\",date:\"2019-11-04\",type:\"Post\",description:\"Can we build a single page application using a static site generator, Gatsby? Ofcourse yes!\",banner:\"cover.jpg\",bannercaption:\"Photo by Tim Trad on Unsplash\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Gatsby, which is a static site generator, is famous for blogs and documentation websites. But there is no wrong in build full blown React apps with it.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the case of a blog, Gatsby builds a page for every article at the build time and generates a directory which can be hosted directly. But when it comes to Single Page App (SPA), we have only one \",(0,n.jsx)(e.code,{children:\"index.html\"}),\" at the root, and the components are loaded depending on the route that the user is in.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We can get the benefits of code spitting with some React lazy suspense features with some minimal extra work too.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`const Contact = React.lazy(() => import('../components/Contact'));\nconst LazyContact = (props) => (\n  <React.Suspense fallback={'<p>Loading...</p>'}>\n    <Contact {...props} />\n  </React.Suspense>\n);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Contact\"}),\" component is loaded only when it will be rendered, which is when we hit a particular route. We will have a look at the routes in a moment.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"But wait\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Before that, we need a \",(0,n.jsx)(e.code,{children:\"gatsby-node.js\"}),\" file to let Gatsby know that we want all the route to end up in \",(0,n.jsx)(e.code,{children:\"index.html\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"After cloning Gatsby's Default starter, let's add this file.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// gatsby-node.js\n\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage } = actions;\n  if (page.path === \\`/\\`) {\n    page.matchPath = \\`/*\\`;\n    createPage(page);\n  }\n};\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now we are ready.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Components for each Routes\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's plan to have two routes, \",(0,n.jsx)(e.code,{children:\"/contact\"}),\" and \",(0,n.jsx)(e.code,{children:\"/about\"}),\" . In \",(0,n.jsx)(e.code,{children:\"src/components\"}),\" we will create basic components like this.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`// src/components/Contact.js\nimport React from 'react';\n\nconsole.log('contact component');\n\nexport default function () {\n  return <div>Contact Us as you like.</div>;\n}\n\n// src/components/About.js\nimport React from 'react';\n\nconsole.log('about component');\n\nexport default function () {\n  return <div>We are a great bunch of people</div>;\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"I've added the console logs to check when this file is loaded. We don't want it to load at the homepage. Rather only when the route is visited.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Main App\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the main page, which is \",(0,n.jsx)(e.code,{children:\"src/pages/index.js\"}),\" we make use for \",(0,n.jsx)(e.code,{children:\"@reach/router\"}),\" which Gatsby itself, uses for routing.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`// src/pages/index.js\n\nimport React from 'react';\nimport { Router, Link } from '@reach/router';\n\nconst Contact = React.lazy(() => import('../components/Contact'));\nconst About = React.lazy(() => import('../components/About'));\n\nconst LazyComponent = ({ Component, ...props }) => (\n  <React.Suspense fallback={'<p>Loading...</p>'}>\n    <Component {...props} />\n  </React.Suspense>\n);\n\nconst Home = () => <h2>Hello and Welcome</h2>;\n\nconst IndexPage = () => (\n  <div>\n    <h1>Hi people</h1>\n    <Link to=\"/\">Home</Link>\n    <br />\n    <Link to=\"/contact/\">Contact</Link>\n    <br />\n    <Link to=\"/about-us\">About Us</Link>\n    <br />\n\n    <input />\n\n    <Router>\n      <Home path=\"/\" />\n      <LazyComponent Component={Contact} path=\"contact\" />\n      <LazyComponent Component={About} path=\"about-us\" />\n    </Router>\n  </div>\n);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"LazyComponent\"}),\" renders the \",(0,n.jsx)(e.code,{children:\"Component\"}),\" we pass to it as a prop under \",(0,n.jsx)(e.code,{children:\"React.Suspense\"}),\" with a fallback.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you build this project and serve, you can open the Networks tab in the browser console and see that a new JS file is loaded when you hit the \",(0,n.jsx)(e.code,{children:\"/contact\"}),\" route for the first time.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"That's it, this is all we need to make an SPA using Gatsby.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here is a working codesandbox link - \",(0,n.jsx)(e.a,{href:\"https://codesandbox.io/s/gatsby-starter-default-yf72w\",children:\"https://codesandbox.io/s/gatsby-starter-default-yf72w\"})]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var k=x;return y(j);})();\n;return Component;"
  },
  "_id": "writings/gatsby-single-page-app/index.mdx",
  "_raw": {
    "sourceFilePath": "writings/gatsby-single-page-app/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "writings/gatsby-single-page-app",
    "contentType": "mdx",
    "flattenedPath": "writings/gatsby-single-page-app"
  },
  "type": "Post",
  "slug": "/writings/gatsby-single-page-app"
}