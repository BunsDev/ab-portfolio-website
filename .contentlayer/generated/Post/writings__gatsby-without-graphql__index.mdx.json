{
  "title": "Gatsby without GraphQL - only JSON",
  "date": "2019-03-02T00:00:00.000Z",
  "published": true,
  "description": "Number one misconception about Gatsby is that you need to know GraphQL to build something with Gatsby, which is not true. Yes, you don't need GraphQL.",
  "tags": "react,javascript,graphql,gatsby",
  "banner": "hero.jpeg",
  "body": {
    "raw": "\nNumber one misconception about Gatsby is that you need to know GraphQL to build something with Gatsby, **which is not true**. Yes, you don't need GraphQL. A Gatsby site can be built from an API or just with some data from a JSON file.\n\n> You don't need GraphQL.\n\nIf you don't know what [Gatsby](https://www.gatsbyjs.org/) is, it is a static site generator built in React. You can use React to build the components of the website and give them to Gatsby, which will then generate a blazing fast website for you.\n\nIf you are interested in building it from an API, [here](https://www.gatsbyjs.org/docs/using-gatsby-without-graphql/) is a well demonstrated example.\n\nIf most of you site is static and only certain part of it changes, why would you need GraphQL to fetch things.\n\nLet us build a site from just a JSON file which contains some data.\n\n# Let's Start\n\nStep One is to clone the `hello-world-starter` and make sure everything works.\n\n```bash\nnpx gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd hello-world\nyarn develop\n```\n\nNow, `http://localhost:8000` should say, \"hello world!\".\n\n# Adding the data\n\nAdd a JSON file at `content/data.json` which has information on the pages. The path is just a personal preference ;)\n\n```javascript\n// content/data.json\n{\n  \"pages\": [\n    {\n      \"title\": \"About\",\n      \"slug\": \"about\",\n      \"paragraphs\": [\n        {\n          \"heading\": \"Work\",\n          \"content\": \"Works as a Javascript Enginneer. Has experience with Gatsby, React, Javascript, Node, Mongo and a little Python as well\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Talks\",\n      \"slug\": \"talks\",\n      \"paragraphs\": [\n        {\n          \"heading\": \"Building A Progressive Web App\",\n          \"content\": \"PWA (Progre...\"\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n# Template to render the Page\n\nNext, we create a template which will get the data from the JSON and render it to the webpage.\n\n```javascript\n// src/templates/page.js\nimport React from 'react';\n\nconst PageTemplate = (props) => {\n  const { title = null, paragraphs = null } = props.pageContext;\n\n  return (\n    <React.Fragment>\n      {title && <h1>{title}</h1>}\n      {paragraphs &&\n        paragraphs.map((para) => (\n          <div>\n            <h2>{para.heading}</h2>\n            <p>{para.content}</p>\n          </div>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default PageTemplate;\n```\n\nA very naive and basic React component which gets `title` and `paragraphs` in the `pageContext` and it renders them. We will get to how the data is passed to `pageContext` in a while.\n\n# Create the Pages now!\n\nHow do we tell Gatsby what pages it should create? By creating `gatsby-node.js`!\n\n```javascript\n// gatsby-node.js\nconst path = require(`path`);\nconst fs = require('fs');\n\nexports.createPages = ({ actions }) => {\n  const { createPage } = actions;\n\n  const pageData = JSON.parse(fs.readFileSync('./content/data.json', { encoding: 'utf-8' }));\n  const blogPostTemplate = path.resolve(`src/templates/page.js`);\n\n  pageData.pages.forEach((page) => {\n    createPage({\n      path: page.slug,\n      component: blogPostTemplate,\n      context: {\n        ...page,\n      },\n    });\n  });\n};\n```\n\nHere, we use `createPages()` API, where we loop through all the pages from the JSON data, and call `createPage()` action to create the actual page. Here we pass the template(which is component) and the URL(path) where the page has to be generated. The actual data is passed as `context`. This is the context that we use in our Page template to populate the data.\n\n# Run\n\nBoom! It actually works of you have used `yarn develop`. It hot reloads every change you make. Now you can navigate to `http://localhost:8000/talks` and `/about` pages and see how they look (and feel good about yourself).\n\nYou realise the potential of Gatsby, right? Possibilities are limitless. In this case, you just have to add styles and you have a portfolio site.\n\nThanks for reading through.\n\nKeep on hacking!\n",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var a in e)r(n,a,{get:e[a],enumerable:!0})},h=(n,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!w.call(n,o)&&o!==a&&r(n,o,{get:()=>e[o],enumerable:!(s=p(e,o))||s.enumerable});return n};var y=(n,e,a)=>(a=n!=null?d(u(n)):{},h(e||!n||!n.__esModule?r(a,\"default\",{value:n,enumerable:!0}):a,n)),f=n=>h(r({},\"__esModule\",{value:!0}),n);var c=m((G,i)=>{i.exports=_jsx_runtime});var P={};b(P,{default:()=>x,frontmatter:()=>j});var t=y(c()),j={title:\"Gatsby without GraphQL - only JSON\",date:\"2019-03-02\",type:\"Post\",published:!0,description:\"Number one misconception about Gatsby is that you need to know GraphQL to build something with Gatsby, which is not true. Yes, you don't need GraphQL.\",tags:\"react,javascript,graphql,gatsby\",banner:\"hero.jpeg\"};function l(n){let e=Object.assign({p:\"p\",strong:\"strong\",blockquote:\"blockquote\",a:\"a\",h1:\"h1\",code:\"code\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Number one misconception about Gatsby is that you need to know GraphQL to build something with Gatsby, \",(0,t.jsx)(e.strong,{children:\"which is not true\"}),\". Yes, you don't need GraphQL. A Gatsby site can be built from an API or just with some data from a JSON file.\"]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"You don't need GraphQL.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you don't know what \",(0,t.jsx)(e.a,{href:\"https://www.gatsbyjs.org/\",children:\"Gatsby\"}),\" is, it is a static site generator built in React. You can use React to build the components of the website and give them to Gatsby, which will then generate a blazing fast website for you.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you are interested in building it from an API, \",(0,t.jsx)(e.a,{href:\"https://www.gatsbyjs.org/docs/using-gatsby-without-graphql/\",children:\"here\"}),\" is a well demonstrated example.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"If most of you site is static and only certain part of it changes, why would you need GraphQL to fetch things.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Let us build a site from just a JSON file which contains some data.\"}),`\n`,(0,t.jsx)(e.h1,{children:\"Let's Start\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Step One is to clone the \",(0,t.jsx)(e.code,{children:\"hello-world-starter\"}),\" and make sure everything works.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`npx gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd hello-world\nyarn develop\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now, \",(0,t.jsx)(e.code,{children:\"http://localhost:8000\"}),' should say, \"hello world!\".']}),`\n`,(0,t.jsx)(e.h1,{children:\"Adding the data\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Add a JSON file at \",(0,t.jsx)(e.code,{children:\"content/data.json\"}),\" which has information on the pages. The path is just a personal preference ;)\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-javascript\",children:`// content/data.json\n{\n  \"pages\": [\n    {\n      \"title\": \"About\",\n      \"slug\": \"about\",\n      \"paragraphs\": [\n        {\n          \"heading\": \"Work\",\n          \"content\": \"Works as a Javascript Enginneer. Has experience with Gatsby, React, Javascript, Node, Mongo and a little Python as well\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Talks\",\n      \"slug\": \"talks\",\n      \"paragraphs\": [\n        {\n          \"heading\": \"Building A Progressive Web App\",\n          \"content\": \"PWA (Progre...\"\n        },\n        ...\n      ]\n    }\n  ]\n}\n`})}),`\n`,(0,t.jsx)(e.h1,{children:\"Template to render the Page\"}),`\n`,(0,t.jsx)(e.p,{children:\"Next, we create a template which will get the data from the JSON and render it to the webpage.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-javascript\",children:`// src/templates/page.js\nimport React from 'react';\n\nconst PageTemplate = (props) => {\n  const { title = null, paragraphs = null } = props.pageContext;\n\n  return (\n    <React.Fragment>\n      {title && <h1>{title}</h1>}\n      {paragraphs &&\n        paragraphs.map((para) => (\n          <div>\n            <h2>{para.heading}</h2>\n            <p>{para.content}</p>\n          </div>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default PageTemplate;\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"A very naive and basic React component which gets \",(0,t.jsx)(e.code,{children:\"title\"}),\" and \",(0,t.jsx)(e.code,{children:\"paragraphs\"}),\" in the \",(0,t.jsx)(e.code,{children:\"pageContext\"}),\" and it renders them. We will get to how the data is passed to \",(0,t.jsx)(e.code,{children:\"pageContext\"}),\" in a while.\"]}),`\n`,(0,t.jsx)(e.h1,{children:\"Create the Pages now!\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"How do we tell Gatsby what pages it should create? By creating \",(0,t.jsx)(e.code,{children:\"gatsby-node.js\"}),\"!\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-javascript\",children:`// gatsby-node.js\nconst path = require(\\`path\\`);\nconst fs = require('fs');\n\nexports.createPages = ({ actions }) => {\n  const { createPage } = actions;\n\n  const pageData = JSON.parse(fs.readFileSync('./content/data.json', { encoding: 'utf-8' }));\n  const blogPostTemplate = path.resolve(\\`src/templates/page.js\\`);\n\n  pageData.pages.forEach((page) => {\n    createPage({\n      path: page.slug,\n      component: blogPostTemplate,\n      context: {\n        ...page,\n      },\n    });\n  });\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here, we use \",(0,t.jsx)(e.code,{children:\"createPages()\"}),\" API, where we loop through all the pages from the JSON data, and call \",(0,t.jsx)(e.code,{children:\"createPage()\"}),\" action to create the actual page. Here we pass the template(which is component) and the URL(path) where the page has to be generated. The actual data is passed as \",(0,t.jsx)(e.code,{children:\"context\"}),\". This is the context that we use in our Page template to populate the data.\"]}),`\n`,(0,t.jsx)(e.h1,{children:\"Run\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Boom! It actually works of you have used \",(0,t.jsx)(e.code,{children:\"yarn develop\"}),\". It hot reloads every change you make. Now you can navigate to \",(0,t.jsx)(e.code,{children:\"http://localhost:8000/talks\"}),\" and \",(0,t.jsx)(e.code,{children:\"/about\"}),\" pages and see how they look (and feel good about yourself).\"]}),`\n`,(0,t.jsx)(e.p,{children:\"You realise the potential of Gatsby, right? Possibilities are limitless. In this case, you just have to add styles and you have a portfolio site.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Thanks for reading through.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Keep on hacking!\"})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var x=v;return f(P);})();\n;return Component;"
  },
  "_id": "writings/gatsby-without-graphql/index.mdx",
  "_raw": {
    "sourceFilePath": "writings/gatsby-without-graphql/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "writings/gatsby-without-graphql",
    "contentType": "mdx",
    "flattenedPath": "writings/gatsby-without-graphql"
  },
  "type": "Post",
  "slug": "/writings/gatsby-without-graphql"
}