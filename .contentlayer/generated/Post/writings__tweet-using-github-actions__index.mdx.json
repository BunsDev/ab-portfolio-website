{
  "title": "Tweet daily using Github Actions",
  "date": "2020-05-12T00:00:00.000Z",
  "description": "I built a GitHub action recently that tweets everyday. Check out the acticle to know.",
  "banner": "banner.jpeg",
  "bannercaption": "Photo by Charles Deluvio on Unsplash",
  "body": {
    "raw": "\nGithub Actions are really powerful. I like to see them as personal assistants. You tell your assistants to do some work for you. Similarly, you tell Github actions to do some job for you.\n\n<GrayBlock>\n\nI've recorded a video while building this. If you'd like to watch me build, here is the video ðŸ‘‡\n\nhttps://www.youtube.com/watch?v=XI_B99Yw4kY\n\n</GrayBlock>\n\nThe main usecase for these actions, I feel, is when we use it to publish your library to npm or deploying your app on S3 or Github Pages whenever you push new changes. CI/CD - like the techies call it.\n\nThese actions can be triggered in different scenarios. In the above usecase, it is triggered on `push`. Similarly, you can also do it on a `pull-request` where we run a few checks or welcome new contributors to the project.\n\nAnother way to trigger an action is on a `schedule`, which is what I used to make the action Tweet everyday. ðŸ—“We can give CRON expressions to schedule the triggers for the action.\n\n_Okay, where do we tell all these things to the Action? There's got to be some config, right?_\n\nYeah. We have a `yaml` file for every action and we specify all the configuration for it there. All the yamls for your actions lie in `.github/workflows` path in your GitHub repo.\n\nThis is the action config I wrote\n\n(Trimmed version. Full code [here](https://github.com/aravindballa/learningcurve.dev/blob/master/.github/workflows/tweet.yml))\n\n```yml\nname: Tweet\n\non:\n  schedule:\n    - cron: '0 10,16 * * *'\n```\n\nNow we know how to schedule things. Next step?\n\n## Tweet\n\nWe know there should be an API to post tweets. But for that, you need a few API credentials from Twitter. This was a big time taking process for me as the application for a dev account on Twitter had to go through a few reviews from Twitter employees.\n\nOnce you get the credentials, tweeting is as easy as the code below.\n\n[Full Code](https://github.com/aravindballa/learningcurve.dev/blob/master/scripts/getQuote.js)\n\n```js\nconst Twitter = require('twitter');\n\nconst client = new Twitter({\n  consumer_key: process.env.TWITTER_API_KEY,\n  consumer_secret: process.env.TWITTER_API_SECRET,\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n});\n\nclient.post('statuses/update', { status: tweet }, function (error, tweet, response) {\n  if (!error) {\n    console.log(tweet);\n  }\n});\n```\n\nI have this in a file `scripts/getQuote.js` and I run using `yarn tweet`. We add a script in `package.json` to be able to do this.\n\n```json\n\"scripts\": {\n  \"tweet\": \"node  scripts/getQuote.js\",\n}\n```\n\n## Last step\n\nWhat's remaining now is that we tell our Action to run `yarn tweet` and that's it.\n\n```yml\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Tweet it yo\n        run: |\n          yarn install\n          yarn tweet\n        env:\n          CI: true\n          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}\n          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}\n          TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```\n\nIf you observe, we pass the Twitter API credentials as environment variables. This can be done in the Repo settings in GitHub. You can add a few secrets and they get passed to the Actions in that repo.\n\n![Screenshot of Github Repo settings](github-repo-settings.png)\n\nThat takes us to the end of the article. Thanks for reading till end and if you think learnt something from this, please tweet it so your friends learn too.\n\nIf you'd like to check out the tweets in action, its here -https://twitter.com/learningcurvpod\n\nhttps://twitter.com/learningcurvpod/status/1259425283003822080\n\nTake care.\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},c=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!T.call(n,r)&&r!==o&&i(n,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return n};var y=(n,e,o)=>(o=n!=null?d(w(n)):{},c(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),f=n=>c(i({},\"__esModule\",{value:!0}),n);var l=g((C,a)=>{a.exports=_jsx_runtime});var v={};m(v,{default:()=>E,frontmatter:()=>b});var t=y(l()),b={title:\"Tweet daily using Github Actions\",date:\"2020-05-12\",type:\"Post\",description:\"I built a GitHub action recently that tweets everyday. Check out the acticle to know.\",banner:\"banner.jpeg\",bannercaption:\"Photo by Charles Deluvio on Unsplash\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",em:\"em\",a:\"a\",pre:\"pre\",h2:\"h2\",img:\"img\"},n.components),{GrayBlock:o}=e;return o||I(\"GrayBlock\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"Github Actions are really powerful. I like to see them as personal assistants. You tell your assistants to do some work for you. Similarly, you tell Github actions to do some job for you.\"}),`\n`,(0,t.jsxs)(o,{children:[(0,t.jsx)(e.p,{children:\"I've recorded a video while building this. If you'd like to watch me build, here is the video \\u{1F447}\"}),(0,t.jsx)(e.p,{children:\"https://www.youtube.com/watch?v=XI_B99Yw4kY\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"The main usecase for these actions, I feel, is when we use it to publish your library to npm or deploying your app on S3 or Github Pages whenever you push new changes. CI/CD - like the techies call it.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"These actions can be triggered in different scenarios. In the above usecase, it is triggered on \",(0,t.jsx)(e.code,{children:\"push\"}),\". Similarly, you can also do it on a \",(0,t.jsx)(e.code,{children:\"pull-request\"}),\" where we run a few checks or welcome new contributors to the project.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another way to trigger an action is on a \",(0,t.jsx)(e.code,{children:\"schedule\"}),\", which is what I used to make the action Tweet everyday. \\u{1F5D3}We can give CRON expressions to schedule the triggers for the action.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Okay, where do we tell all these things to the Action? There's got to be some config, right?\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Yeah. We have a \",(0,t.jsx)(e.code,{children:\"yaml\"}),\" file for every action and we specify all the configuration for it there. All the yamls for your actions lie in \",(0,t.jsx)(e.code,{children:\".github/workflows\"}),\" path in your GitHub repo.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This is the action config I wrote\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"(Trimmed version. Full code \",(0,t.jsx)(e.a,{href:\"https://github.com/aravindballa/learningcurve.dev/blob/master/.github/workflows/tweet.yml\",children:\"here\"}),\")\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yml\",children:`name: Tweet\n\non:\n  schedule:\n    - cron: '0 10,16 * * *'\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Now we know how to schedule things. Next step?\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Tweet\"}),`\n`,(0,t.jsx)(e.p,{children:\"We know there should be an API to post tweets. But for that, you need a few API credentials from Twitter. This was a big time taking process for me as the application for a dev account on Twitter had to go through a few reviews from Twitter employees.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Once you get the credentials, tweeting is as easy as the code below.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/aravindballa/learningcurve.dev/blob/master/scripts/getQuote.js\",children:\"Full Code\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const Twitter = require('twitter');\n\nconst client = new Twitter({\n  consumer_key: process.env.TWITTER_API_KEY,\n  consumer_secret: process.env.TWITTER_API_SECRET,\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n});\n\nclient.post('statuses/update', { status: tweet }, function (error, tweet, response) {\n  if (!error) {\n    console.log(tweet);\n  }\n});\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"I have this in a file \",(0,t.jsx)(e.code,{children:\"scripts/getQuote.js\"}),\" and I run using \",(0,t.jsx)(e.code,{children:\"yarn tweet\"}),\". We add a script in \",(0,t.jsx)(e.code,{children:\"package.json\"}),\" to be able to do this.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-json\",children:`\"scripts\": {\n  \"tweet\": \"node  scripts/getQuote.js\",\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Last step\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"What's remaining now is that we tell our Action to run \",(0,t.jsx)(e.code,{children:\"yarn tweet\"}),\" and that's it.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yml\",children:`jobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Tweet it yo\n        run: |\n          yarn install\n          yarn tweet\n        env:\n          CI: true\n          TWITTER_API_KEY: \\${{ secrets.TWITTER_API_KEY }}\n          TWITTER_API_SECRET: \\${{ secrets.TWITTER_API_SECRET }}\n          TWITTER_ACCESS_TOKEN_KEY: \\${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}\n          TWITTER_ACCESS_TOKEN_SECRET: \\${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"If you observe, we pass the Twitter API credentials as environment variables. This can be done in the Repo settings in GitHub. You can add a few secrets and they get passed to the Actions in that repo.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"github-repo-settings.png\",alt:\"Screenshot of Github Repo settings\"})}),`\n`,(0,t.jsx)(e.p,{children:\"That takes us to the end of the article. Thanks for reading till end and if you think learnt something from this, please tweet it so your friends learn too.\"}),`\n`,(0,t.jsx)(e.p,{children:\"If you'd like to check out the tweets in action, its here -https://twitter.com/learningcurvpod\"}),`\n`,(0,t.jsx)(e.p,{children:\"https://twitter.com/learningcurvpod/status/1259425283003822080\"}),`\n`,(0,t.jsx)(e.p,{children:\"Take care.\"})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var E=_;function I(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return f(v);})();\n;return Component;"
  },
  "_id": "writings/tweet-using-github-actions/index.mdx",
  "_raw": {
    "sourceFilePath": "writings/tweet-using-github-actions/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "writings/tweet-using-github-actions",
    "contentType": "mdx",
    "flattenedPath": "writings/tweet-using-github-actions"
  },
  "type": "Post",
  "slug": "/writings/tweet-using-github-actions"
}